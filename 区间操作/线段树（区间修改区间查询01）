import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.io.PrintWriter;
import java.util.HashMap;


/*
 * 
 * 
 * 题目描述：	
   前缀和（prefix sum）Si = ∑(1-i) ak 
   前前缀和（preprefix sum）则把Si作为原序列再进行前缀和。记得再次求得前缀和第i个是SSi
   给一个长度为n的序列a1，a2.。。。。。an，有两种操作
	 1.	Modify I x: 把 ai改成x；
	 2.	Query i:查询SSi
	
 * 输入说明
 	第一行给出两个整数N，M。分别表示序列长度和操作个数
	接下来一行有N个数，即给定的序列a1,a2,....an
	接下来M行，每行对应一个操作，格式见题目描述
	
 * 输出说明
	对于每个询问操作，输出一行，表示所询问的SSi的值。
	
 * 	输入数据
    5 3
  	1 2 3 4 5
	  Query 5
	  Modify 3 2
	  Query 5
	
 *  输出结果
	  35
	  32
*/

public class Main {

	static long tree[];  //线段树
	static long data[], b[];  //data保存源数据 ，b保存标记
	static int n;

	
	
	//上传标记
	static void pushUp(int node) {
		tree[node] = tree[node << 1] + tree[(node << 1) | 1];
	}

	//下放标记
	static void pushDown(int start, int end, int node) {
		int mid = (start + end) >> 1;

		tree[node << 1] += b[node] * (mid - start + 1);   //左边的要包括mid本身所以要加+1
		tree[(node << 1) | 1] += b[node] * (end - mid); // 右边的不需要+1
		
		 //把加的内容给下面的
		b[node << 1] += b[node]; 
		b[(node << 1) | 1] += b[node];   
		
		//清除
		b[node] = 0;
	}

	
	//建树
	static void build_Tree(int start, int end, int node) {
		//但start==end时当且仅当为一个点的时候
		if (start == end) {
			tree[node] = data[start];
			return;
		}

		int mid = (start + end) >> 1;
		
		//左边建树
		build_Tree(start, mid, node << 1);
		//右边的建树
		build_Tree(mid + 1, end, (node << 1) | 1);

		//上传标记，更新节点的值
		pushUp(node);
	}
	
	//更新
	//c的值一定要赋值long类型，即使c不会超过long，但是在（end-start+1）*c有可能超过long，但是如果是两个int*int=int类型，所以要int*long=long类型
	static void update_tree(int start, int end, int node, int L, int R, long c) {  
		//包含情況
		if (L <= start && end <= R) {
			tree[node] += (end - start + 1) * c;
			b[node] += c;
			return;
		}
		
		//判断标记是否0 ，这里一定是==0，不能小于0，有可能加的是负数
		if (b[node] != 0)
			pushDown(start, end, node);

		int mid = (start + end) >> 1;
		//在左边有内容
		if (L <= mid)
			update_tree(start, mid, node << 1, L, R, c);
		//在右边有内容
		if (R > mid)
			update_tree(mid + 1, end, (node << 1) | 1, L, R, c);

		//上传标记
		pushUp(node);

	}

	//查询
	static long query_Tree(int start, int end, int node, int L, int R) {
		
		//包含就直接拿結果
		if (L <= start && end <= R) 
			return tree[node];
		
		//下放标记
		if (b[node] != 0)
			pushDown(start, end, node);

		long ans = 0;
		int mid = (start + end) >> 1;
		//左边有
		if (L <= mid)
			ans += query_Tree(start, mid, node << 1, L, R);
		//右边有
		if (R > mid)
			ans += query_Tree(mid + 1, end, (node << 1) | 1, L, R);
		return ans;

	}

	public static void main(String[] args) throws NumberFormatException, IOException {

		//读入
		BufferedReader reader = new BufferedReader(new InputStreamReader(System.in)); // 输入
		String str[] = reader.readLine().split(" ");
		n = Integer.parseInt(str[0]);
		int m = Integer.parseInt(str[1]);
		
		//初始化空间
		int number[] = new int[n + 1];
		tree = new long[n << 2];
		data = new long[n + 1];
		b = new long[n << 2];
		
		
		str = reader.readLine().split(" ");
		
		//读入数据
		for (int i = 1; i <= n; i++) {
			number[i] = Integer.parseInt(str[i - 1]);  //原数组
			data[i] = number[i] + data[i - 1];   //维护前缀和数字

		}
		
		build_Tree(1, n, 1);    //建树

		StringBuffer sb = new StringBuffer();

		for (int i = 0; i < m; i++) {
		//	读入数据
			str = reader.readLine().split(" ");
			int a = Integer.parseInt(str[1]);
			
			//判斷标记
			if (str[0].equals("Query")) {
				sb.append(query_Tree(1, n, 1, 1, a)).append("\n");   //读1-a的前缀和
			} else {
				int b = Integer.parseInt(str[2]);
				long c = b - number[a];    //如果是更新了一个大于number[a]的树就是+c，否则就是-c
				number[a] = b;   //更新源数组
				if (c != 0)  //等于0的时候就是源数组和更新数相同，不需要修改
					update_tree(1, n, 1, a, n, c);   //更改
			}
		}

		System.out.println(sb);  //输出

	}
}
